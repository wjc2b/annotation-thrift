package com.wjc.thrift.context;import com.wjc.thrift.properties.ThriftServerProperties;import com.wjc.thrift.wrapper.ThriftServiceWrapper;import org.apache.thrift.server.TServer;import java.io.IOException;import java.util.List;import java.util.Objects;import java.util.concurrent.locks.Lock;import java.util.concurrent.locks.ReentrantLock;import com.wjc.thrift.properties.TServerModel;import org.apache.thrift.transport.TTransportException;/** * @author wjc * @date 2024-04-06 20:34 * @desription */public abstract class AbstractThriftServerContext {    private final Lock thriftServerLock = new ReentrantLock();    protected ThriftServerProperties properties;    protected List<ThriftServiceWrapper> serviceWrappers;    private volatile TServer thriftServer;    public TServer buildServer() throws TTransportException, IOException {        if(Objects.isNull(thriftServer)){            thriftServerLock.lock();            try{                return Objects.isNull(thriftServer)? build():thriftServer;            }finally {                thriftServerLock.unlock();            }        }        return thriftServer;    }    private TServer build() throws TTransportException, IOException {        String serviceModel = properties.getServerModel();        switch (serviceModel){            case TServerModel.SERVER_MODEL_SIMPLE:                thriftServer = buildTSimpleServer();                break;            case TServerModel.SERVER_MODEL_THREADED_SELECTOR:                thriftServer = buildTThreadedSelectorServer();                break;            default:                thriftServer = buildTHsHaServer();                break;        }        return getThriftServer();    }    private TServer getThriftServer() {        return thriftServer;    }    protected abstract TServer buildTNonBlockingServer() throws TTransportException, IOException;    protected abstract TServer buildTSimpleServer() throws TTransportException, IOException;    protected abstract TServer buildTThreadPoolServer() throws TTransportException, IOException;    protected abstract TServer buildTHsHaServer() throws TTransportException, IOException;    protected abstract TServer buildTThreadedSelectorServer() throws TTransportException, IOException;    protected ThriftServerProperties getProperties() {        return properties;    }    public AbstractThriftServerContext setProperties(ThriftServerProperties properties) {        this.properties = properties;        return this;    }    public List<ThriftServiceWrapper> getServiceWrappers() {        return serviceWrappers;    }    public AbstractThriftServerContext setServiceWrappers(List<ThriftServiceWrapper> serviceWrappers) {        this.serviceWrappers = serviceWrappers;        return this;    }}